<?php

/**
 * This file is part of Git-Live
 *
 * This source file is subject to the MIT license that is bundled
 * with this source code in the file LICENSE.
 *
 * @category   GitCommand
 * @package    Git-Live
 * @subpackage Core
 * @author     akito<akito-artisan@five-foxes.com>
 * @author     suzunone<suzunone.eleven@gmail.com>
 * @copyright  Project Git Live
 * @license    MIT
 * @version    GIT: $Id\$
 * @link       https://github.com/Git-Live/git-live
 * @see        https://github.com/Git-Live/git-live
 */

namespace Tests\GitLive\Command;

use GitLive\Application\Application;
use GitLive\Application\Facade as App;
use Tests\GitLive\Tester\CommandTestCase as TestCase;
use Tests\GitLive\Tester\CommandTester;
use Tests\GitLive\Tester\CommandTestTrait;
use Tests\GitLive\Tester\MakeGitTestRepoTrait;

/**
 * @internal
 * @coversNothing
 */
class SelfUpdateCommandTest extends TestCase
{
    use CommandTestTrait;
    // use MakeGitTestRepoTrait;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        @unlink(PROJECT_ROOT_DIR . '/storage/unit_testing/self_update');
    }

    // use MakeGitTestRepoTrait;

    protected function tearDown(): void
    {
        parent::tearDown(); // TODO: Change the autogenerated stub

        @unlink(PROJECT_ROOT_DIR . '/storage/unit_testing/self_update');
    }

    /**
     * @throws \Exception
     * @covers \GitLive\Command\SelfUpdateCommand
     */
    public function testExecute()
    {
        $application = App::make(Application::class);
        $command = $application->find('self-update');
        $commandTester = new CommandTester($command);
        $commandTester->execute([
            'command' => $command->getName(),

            // pass arguments to the helper
            'save_path' => PROJECT_ROOT_DIR . '/storage/unit_testing/self_update',

            // prefix the key with two dashes when passing options,
            // e.g: '--some-option' => 'option_value',
        ]);

        $output = $commandTester->getDisplay();
        dump($output);

        $this->assertIsReadable(PROJECT_ROOT_DIR . '/storage/unit_testing/self_update');
        $this->assertContains('Connected...', $output);
    }
}
